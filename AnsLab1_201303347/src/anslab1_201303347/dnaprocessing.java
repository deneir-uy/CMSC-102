 /* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package anslab1_201303347;

import java.awt.BorderLayout;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;

/**
 *
 * @author deneir-uy
 */

class DNA {
    private String sequence;
    private String codedProtein;
    private String description;
    
    DNA()
    {
        this.sequence = "";
        this.codedProtein = "";
        this.description = "";
    }
//
//    DNA(String description, String sequence) {
//        setDescription(description);
//        setSequence(sequence);
//    }

    /**
     * @return the sequence
     */
    public String getSequence() {
        return sequence;
    }

    /**
     * @param sequence the sequence to set
     */
    public void setSequence(String sequence) {
        this.sequence = sequence;
    }

    /**
     * @return the codedProtein
     */
    public String getCodedProtein() {
        return codedProtein;
    }

    /**
     * @param codedProtein the codedProtein to set
     */
    public void setCodedProtein(String codedProtein) {
        this.codedProtein = codedProtein;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
}

public class dnaprocessing extends javax.swing.JFrame {
    
    static HashMap<String, String> aminoAcids = new HashMap<>();
    static HashMap<String, String> aminoAcidCode = new HashMap<>();
    static ArrayList<DNA> DNAs = new ArrayList<>();
    static float percentageA = 0;
    static float percentageC = 0;
    static float percentageG = 0;
    static float percentageT = 0;
    static float freqA = 0;
    static float freqC = 0;
    static float freqG = 0;
    static float freqT = 0;
    static int occurA[];
    static int occurC[];
    static int occurG[];
    static int occurT[];
    static float totalPercentage = 0;
    static int total = 0;
    /**
     * Creates new form dnaprocessing
     */
    public dnaprocessing() {
        initComponents();
        initializeAminoAcids();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flechFasta = new javax.swing.JFileChooser();
        flechSave = new javax.swing.JFileChooser();
        flechSaveTable = new javax.swing.JFileChooser();
        dlgGraph = new javax.swing.JDialog();
        frmGraph = new javax.swing.JFrame();
        btnSubmit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtarDecoded = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtarDNA = new javax.swing.JTextArea();
        btnChooseFasta = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFreqPerc = new javax.swing.JTable();
        btnSaveTable = new javax.swing.JButton();
        btnViewGraph = new javax.swing.JButton();

        dlgGraph.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout dlgGraphLayout = new javax.swing.GroupLayout(dlgGraph.getContentPane());
        dlgGraph.getContentPane().setLayout(dlgGraphLayout);
        dlgGraphLayout.setHorizontalGroup(
            dlgGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        dlgGraphLayout.setVerticalGroup(
            dlgGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        frmGraph.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        frmGraph.setTitle("Graph");

        javax.swing.GroupLayout frmGraphLayout = new javax.swing.GroupLayout(frmGraph.getContentPane());
        frmGraph.getContentPane().setLayout(frmGraphLayout);
        frmGraphLayout.setHorizontalGroup(
            frmGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        frmGraphLayout.setVerticalGroup(
            frmGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        txtarDecoded.setEditable(false);
        txtarDecoded.setColumns(20);
        txtarDecoded.setRows(5);
        jScrollPane2.setViewportView(txtarDecoded);

        txtarDNA.setColumns(20);
        txtarDNA.setRows(5);
        jScrollPane1.setViewportView(txtarDNA);

        btnChooseFasta.setText("Pick FASTA");
        btnChooseFasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFastaActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setText("Save as Fasta");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tblFreqPerc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nucleotide", "Frequency", "Percentage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblFreqPerc);

        btnSaveTable.setText("Save table");
        btnSaveTable.setEnabled(false);
        btnSaveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTableActionPerformed(evt);
            }
        });

        btnViewGraph.setText("View graph");
        btnViewGraph.setEnabled(false);
        btnViewGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChooseFasta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSubmit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnViewGraph)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSaveTable)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSave)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnReset))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSubmit)
                    .addComponent(btnChooseFasta, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(btnSave)
                    .addComponent(btnSaveTable)
                    .addComponent(btnViewGraph))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

        String codedProteins = "";
        String input = txtarDNA.getText();
        readInputForSequences(input);
        
        for (int i = 0; i < DNAs.size(); i++) {
            DNAs.get(i).setCodedProtein(translateDNASequence(DNAs.get(i).getSequence()));
            codedProteins += DNAs.get(i).getDescription() + "\n" + DNAs.get(i).getCodedProtein() + "\n\n";
        }
        
        countNucleotides();
        computePercentages();
        
        Object[] rowA = {"A", freqA, percentageA};
        Object[] rowC = {"C", freqC, percentageC};
        Object[] rowG = {"G", freqG, percentageG};
        Object[] rowT = {"T", freqT, percentageT};
        Object[] rowTotal = {"Total", total, totalPercentage};
        
        DefaultTableModel model = (DefaultTableModel) tblFreqPerc.getModel();
        model.addRow(rowA);
        model.addRow(rowC);
        model.addRow(rowG);
        model.addRow(rowT);
        model.addRow(rowTotal);

        txtarDecoded.setText(codedProteins);
        
        btnSubmit.setEnabled(false);
        btnChooseFasta.setEnabled(false);
        btnSave.setEnabled(true);
        btnSaveTable.setEnabled(true);
        btnViewGraph.setEnabled(true);
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnChooseFastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFastaActionPerformed
        flechFasta.showOpenDialog(jScrollPane1);
        File fasta = flechFasta.getSelectedFile();
        String fastaContents = "";
        
        try {
            fastaContents = readFasta(fasta);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(dnaprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        txtarDNA.setText(fastaContents);
    }//GEN-LAST:event_btnChooseFastaActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        DNAs.removeAll(DNAs);
        percentageA = 0;
        percentageC = 0;
        percentageG = 0;
        percentageT = 0;
        freqA = 0;
        freqC = 0;
        freqG = 0;
        freqT = 0;
        totalPercentage = 0;
        total = 0;
        new dnaprocessing().setVisible(true);
        this.dispose();
//        DNAs.removeAll(DNAs);
//        txtarDNA.setText("");
//        txtarDecoded.setText("");
//        btnSave.setEnabled(false);
//        btnSubmit.setEnabled(true);
//        btnChooseFasta.setEnabled(true);
//        btnSaveTable.setEnabled(false);
//        btnViewGraph.setEnabled(false);
//        
//        DefaultTableModel dm = (DefaultTableModel) tblFreqPerc.getModel();
//        int rowCount = dm.getRowCount();
//
//        for (int i = rowCount - 1; i >= 0; i--) {
//            dm.removeRow(i);
//        }
        
       
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        flechSave.showSaveDialog(jScrollPane2);
        File saveFile = flechSave.getSelectedFile();
        String filename = saveFile.getAbsolutePath();
        
        try {
            FileWriter write = new FileWriter(filename);
            
            BufferedWriter writer = new BufferedWriter(write);
            
            writer.write(txtarDecoded.getText());
            
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(dnaprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSaveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTableActionPerformed
        try {
            flechSaveTable.showSaveDialog(jScrollPane2);
            BufferedImage bi = createImage(tblFreqPerc);
            File outputfile = flechSaveTable.getSelectedFile();
            ImageIO.write(bi, "png", outputfile);
        } catch (IOException e) {
            Logger.getLogger(dnaprocessing.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnSaveTableActionPerformed

    private void btnViewGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewGraphActionPerformed
        countOccurences(DNAs);
        
        int xData[] = new int[occurA.length];
        
        for (int i = 0; i < xData.length; i++) 
        {
            xData[i] = i;
        }
        
        //ExampleChart<XYChart> chart = new LineChart04();
        XYChart chart = new XYChartBuilder().width(1000).height(400).title("Occurences Graph").xAxisTitle("Position").yAxisTitle("Occurences").build();

        chart.addSeries("A", xData, occurA);
        chart.addSeries("C", xData, occurC);
        chart.addSeries("G", xData, occurG);
        chart.addSeries("T", xData, occurT);
        
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                // Create and set up the window.
                JFrame frame = new JFrame("Advanced Example");
                frame.setLayout(new BorderLayout());
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

                // chart
                JPanel chartPanel = new XChartPanel<XYChart>(chart);
                frame.add(chartPanel, BorderLayout.CENTER);

                // Display the window.
                frame.pack();
                frame.setVisible(true);
                    }
            });
        
    }//GEN-LAST:event_btnViewGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dnaprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dnaprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dnaprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dnaprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dnaprocessing().setVisible(true);
            }
            
            
        });
        
    }
    
    public static BufferedImage createImage(JTable table) {
        JTableHeader tableHeaderComp = table.getTableHeader();
        int totalWidth = tableHeaderComp.getWidth() + table.getWidth();
        int totalHeight = tableHeaderComp.getHeight() + table.getHeight();
        
        BufferedImage tableImage = new BufferedImage(totalWidth, totalHeight,
            BufferedImage.TYPE_INT_RGB);
        
        Graphics2D g2D = (Graphics2D) tableImage.getGraphics();
        tableHeaderComp.paint(g2D);
        g2D.translate(0, tableHeaderComp.getHeight());
        table.paint(g2D);
        
        return tableImage;
    }
    
    public static void countOccurences(ArrayList<DNA> DNAs)
    {   
        int length = getLengthOfLongest(DNAs);
        occurA = new int[length];
        occurC = new int[length];
        occurG = new int[length];
        occurT = new int[length];
        
        for (int i = 0; i < DNAs.size(); i++) {
            String dnaSequence = DNAs.get(i).getSequence();
            for (int j = 0; j < dnaSequence.length(); j++) {
                switch(dnaSequence.charAt(j))
                {
                    case 'A':
                        occurA[j]++;
                        break;
                    case 'C':
                        occurC[j]++;
                        break;
                    case 'G':
                        occurG[j]++;
                        break;
                    case 'T':
                        occurT[j]++;
                        break;
                }
            }
        }
    }
    
    public static int getLengthOfLongest(ArrayList<DNA> DNAs)
    {
        int length = 0;
        for (int i = 0; i < DNAs.size(); i++) 
        {
            if(length < DNAs.get(i).getSequence().length())
                length = DNAs.get(i).getSequence().length();
        }
        
        return length;
    }
    
    public static void computePercentages()
    {
        percentageA = (freqA / total) * 100;
        percentageC = (freqC / total) * 100;
        percentageG = (freqG / total) * 100;
        percentageT = (freqT / total) * 100;
        totalPercentage = percentageA + percentageC + percentageG + percentageT;
        
    }
    
    public static void countNucleotides()
    {
        for (int i = 0; i < DNAs.size(); i++) 
        {
            for (int j = 0; j < DNAs.get(i).getSequence().length(); j++) 
            {
                switch(DNAs.get(i).getSequence().charAt(j)) {
                    case 'A':
                        freqA++;
                        total++;
                        break;
                    case 'C':
                        freqC++;
                        total++;
                        break;
                    case 'G':
                        freqG++;
                        total++;
                        break;
                    case 'T':
                        freqT++;
                        total++;
                        break;
                }
            }
        }
    }
    
    public static String translateDNASequence(String sequence)
    {
        //String uppercaseSequence = sequence.toUpperCase();
        String protein = "";
        
        for (int i = 0; i < sequence.length(); i += 3) 
        {
            String substring = sequence.substring(i, i+3);
            protein += aminoAcids.get(substring);
        }
        
        return protein;
    }
    
    public static String readFasta(File file) throws FileNotFoundException
    {
        Scanner scan = new Scanner(file);
        String contents = "";
        
        while(scan.hasNextLine())
        {
            contents += scan.nextLine() + "\n";
        }
        
        return contents;
    }
    
    public static void readInputForSequences(String input)
    {
        Scanner scan = new Scanner(input);
        String line, scanned;
        while(scan.hasNextLine())
        {
            line = scan.nextLine();
            if(!line.isEmpty()){
                
                if((line.contains(">")))
                {
                    DNAs.add(new DNA());
                    DNAs.get(DNAs.size()-1).setDescription(line);
                    
                    scanned = scan.nextLine().toUpperCase();
                    DNAs.get(DNAs.size() - 1).setSequence(DNAs.get(DNAs.size() - 1).getSequence() + scanned);
                }
            }
        }
    }
    
    public static void initializeAminoAcids()
    {
        aminoAcids.put("TTT", "F");
        aminoAcids.put("TTC", "F");
        aminoAcids.put("TTA", "L");
        aminoAcids.put("TTG", "L");
        aminoAcids.put("CTT", "L");
        aminoAcids.put("CTC", "L");
        aminoAcids.put("CTA", "L");
        aminoAcids.put("CTG", "L");
        aminoAcids.put("ATT", "I");
        aminoAcids.put("ATC", "I");
        aminoAcids.put("ATA", "I");
        aminoAcids.put("ATG", "M");
        aminoAcids.put("GTT", "V");
        aminoAcids.put("GTC", "V");
        aminoAcids.put("GTA", "V");
        aminoAcids.put("GTG", "V");
        aminoAcids.put("TCT", "S");
        aminoAcids.put("TCC", "S");
        aminoAcids.put("TCA", "S");
        aminoAcids.put("TCG", "S");
        aminoAcids.put("CCT", "P");
        aminoAcids.put("CCC", "P");
        aminoAcids.put("CCA", "P");
        aminoAcids.put("CCG", "P");
        aminoAcids.put("ACT", "T");
        aminoAcids.put("ACC", "T");
        aminoAcids.put("ACA", "T");
        aminoAcids.put("ACG", "T");
        aminoAcids.put("GCT", "A");
        aminoAcids.put("GCC", "A");
        aminoAcids.put("GCA", "A");
        aminoAcids.put("GCG", "A");
        aminoAcids.put("TAT", "Y");
        aminoAcids.put("TAC", "Y");
        aminoAcids.put("TAA", "_");
        aminoAcids.put("TAG", "_");
        aminoAcids.put("CAT", "H");
        aminoAcids.put("CAC", "H");
        aminoAcids.put("CAA", "Q");
        aminoAcids.put("CAG", "Q");
        aminoAcids.put("AAT", "N");
        aminoAcids.put("AAC", "N");
        aminoAcids.put("AAA", "K");
        aminoAcids.put("AAG", "K");
        aminoAcids.put("GAT", "D");
        aminoAcids.put("GAC", "D");
        aminoAcids.put("GAA", "E");
        aminoAcids.put("GAG", "E");
        aminoAcids.put("TGT", "C");
        aminoAcids.put("TGC", "C");
        aminoAcids.put("TGA", "_");
        aminoAcids.put("TGG", "W");
        aminoAcids.put("CGT", "R");
        aminoAcids.put("CGC", "R");
        aminoAcids.put("CGA", "R");
        aminoAcids.put("CGG", "R");
        aminoAcids.put("AGT", "S");
        aminoAcids.put("AGC", "S");
        aminoAcids.put("AGA", "R");
        aminoAcids.put("AGG", "R");
        aminoAcids.put("GGT", "G");
        aminoAcids.put("GGC", "G");
        aminoAcids.put("GGA", "G");
        aminoAcids.put("GGG", "G");
        
        aminoAcidCode.put("A", "Alanine");
        aminoAcidCode.put("C", "Cysteine");
        aminoAcidCode.put("D", "Aspartic Acid");
        aminoAcidCode.put("E", "Glutamic Acid");
        aminoAcidCode.put("F", "Phenylalanine");
        aminoAcidCode.put("G", "Glycine");
        aminoAcidCode.put("H", "Histidine");
        aminoAcidCode.put("I", "Isoleucine");
        aminoAcidCode.put("K", "Lysine");
        aminoAcidCode.put("M", "Methionine");
        aminoAcidCode.put("N", "Asparagine");
        aminoAcidCode.put("P", "Proline");
        aminoAcidCode.put("Q", "Glutamine");
        aminoAcidCode.put("R", "Arginine");
        aminoAcidCode.put("S", "Serine");
        aminoAcidCode.put("T", "Threonine");
        aminoAcidCode.put("V", "Valine");
        aminoAcidCode.put("W", "Tryptophan");
        aminoAcidCode.put("Y", "Tyrosine");
        aminoAcidCode.put("L", "Leucine");
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFasta;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveTable;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewGraph;
    private javax.swing.JDialog dlgGraph;
    private javax.swing.JFileChooser flechFasta;
    private javax.swing.JFileChooser flechSave;
    private javax.swing.JFileChooser flechSaveTable;
    private javax.swing.JFrame frmGraph;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblFreqPerc;
    private javax.swing.JTextArea txtarDNA;
    private javax.swing.JTextArea txtarDecoded;
    // End of variables declaration//GEN-END:variables
}
